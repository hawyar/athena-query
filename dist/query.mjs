import{fromEnv as b,fromIni as g}from"@aws-sdk/credential-providers";import{StartQueryExecutionCommand as S,GetQueryExecutionCommand as C,AthenaClient as k,GetQueryResultsCommand as Q}from"@aws-sdk/client-athena";let o=null;async function I(l,e={}){if(!l||typeof l!="string")throw new Error('query string is required (e.g. SELECT * FROM "sales" limit 10;)');if(!e.output)throw new Error("output location is required (e.g. s3://bucket/path)");e.database=e.database||"default",e.workgroup=e.workgroup||"primary",e.catalog=e.catalog||"AwsDataCatalog",e.backoff=e.backoff||1e3,e.region=e.region||"us-east-2";let c=null;e.profile?c=g({profile:e.profile}):c=b(),o===null&&(o=new k({region:e.region,credentials:c}));const f=await o.send(new S({QueryString:l,WorkGroup:e.workgroup,QueryExecutionContext:{Database:e.database||"default",Catalog:e.catalog||"AwsDataCatalog"},ResultConfiguration:{OutputLocation:e.output.startsWith("s3://")?e.output:`s3://${e.output}`}}));if(f.$metadata.httpStatusCode!==200)throw new Error("failed query");let m=0,w=e.backoff||1e3;const y=async()=>new Promise((n,t)=>{setTimeout(async()=>{const a=await o.send(new C({QueryExecutionId:f.QueryExecutionId}));if(a.$metadata.httpStatusCode!==200&&t(new Error("FailedQuery: unable to query Athena")),a.QueryExecution.Status.State==="SUCCEEDED")return n();if(a.QueryExecution.Status.State==="FAILED")return t(new Error("FailedQuery: unable to query Athena"));if(a.QueryExecution.Status.State==="CANCELLED")return t(new Error("CancelledQuery: unable to query Athena"));(a.QueryExecution.Status.State==="RUNNING"||a.QueryExecution.Status.State==="QUEUED")&&(m++,y().then(n).catch(t))},w)});await y().catch(n=>{throw new Error(n)});const s=await o.send(new Q({QueryExecutionId:f.QueryExecutionId}));if(s.$metadata.httpStatusCode!==200)throw new Error("FailedQuery: unable to query Athena");const i=s.ResultSet.ResultSetMetadata.ColumnInfo.map(n=>({name:n.Name,type:n.Type}));s.ResultSet.Rows.shift();const E=s.ResultSet.Rows.map(n=>{const t={};return n.Data.forEach((a,d)=>{if(Object.keys(a).length===0)return;a.VarCharValue===null&&(t[i[d].name]=null);const h=i[d].type,u=i[d].name,r=a.VarCharValue;switch(h){case"array":t[u]=r.split(",");break;case"date":t[u]=new Date(r);break;case"tinyint":t[u]=parseInt(r);break;case"double":t[u]=parseFloat(r);break;case"bigint":Number.isSafeInteger(parseInt(r))?t[u]=parseInt(r):t[u]=BigInt(r);break;case"boolean":t[u]=r==="true";break;case"varchar":t[u]=r;break;default:t[u]=r;break}}),t});return[i,E]}export{I as query};
