var Q=Object.create;var y=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var g=t=>y(t,"__esModule",{value:!0});var V=(t,e)=>{g(t);for(var u in e)y(t,u,{get:e[u],enumerable:!0})},D=(t,e,u)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of x(e))!p.call(t,o)&&o!=="default"&&y(t,o,{get:()=>e[o],enumerable:!(u=b(e,o))||u.enumerable});return t},C=t=>D(g(y(t!=null?Q(k(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);V(exports,{query:()=>R});var m=C(require("@aws-sdk/credential-providers")),l=C(require("@aws-sdk/client-athena"));let f=null;async function R(t,e={}){if(!t||typeof t!="string")throw new Error('query string is required (e.g. SELECT * FROM "sales" limit 10;)');if(!e.output)throw new Error("output location is required (e.g. s3://bucket/path)");e.database=e.database||"default",e.workgroup=e.workgroup||"primary",e.catalog=e.catalog||"AwsDataCatalog",e.backoff=e.backoff||1e3,e.region=e.region||"us-east-2";let u=null;e.profile?u=(0,m.fromIni)({profile:e.profile}):u=(0,m.fromEnv)(),f===null&&(f=new l.AthenaClient({region:e.region,credentials:u}));const o=await f.send(new l.StartQueryExecutionCommand({QueryString:t,WorkGroup:e.workgroup,QueryExecutionContext:{Database:e.database||"default",Catalog:e.catalog||"AwsDataCatalog"},ResultConfiguration:{OutputLocation:e.output.startsWith("s3://")?e.output:`s3://${e.output}`}}));if(o.$metadata.httpStatusCode!==200)throw new Error("failed query");let E=0,w=e.backoff;const h=async()=>new Promise((i,r)=>{setTimeout(async()=>{const a=await f.send(new l.GetQueryExecutionCommand({QueryExecutionId:o.QueryExecutionId}));a.$metadata.httpStatusCode!==200&&r(new Error("FailedQuery: unable to query Athena")),a.QueryExecution.Status.State==="SUCCEEDED"?i(a):a.QueryExecution.Status.State==="FAILED"?(console.log(a.QueryExecution),r(new Error("FailedQuery: unable to query Athena"))):a.QueryExecution.Status.State==="CANCELLED"?r(new Error("FailedQuery: unable to query Athena")):(a.QueryExecution.Status.State==="RUNNING"||a.QueryExecution.Status.State==="QUEUED")&&(E++,w=e.backoff+E*100,h().then(i).catch(r))},w)});await h().catch(i=>{throw new Error(i)});const d=await f.send(new l.GetQueryResultsCommand({QueryExecutionId:o.QueryExecutionId}));if(d.$metadata.httpStatusCode!==200)throw new Error("FailedQuery: unable to query Athena");const s=d.ResultSet.ResultSetMetadata.ColumnInfo.map(i=>({name:i.Name,type:i.Type}));d.ResultSet.Rows.shift();const S=d.ResultSet.Rows.map(i=>{const r={};return i.Data.forEach((a,c)=>{if(Object.keys(a).length===0)return;a.VarCharValue===null&&(r[s[c].name]=null);const n=s[c].type;if(n==="date"||n==="timestamp"){r[s[c].name]=new Date(a.VarCharValue);return}if(n==="tinyint"||n==="smallint"||n==="integer"||n==="bigint"){r[s[c].name]=parseInt(a.VarCharValue);return}if(n==="double"||n==="float"||n==="decimal"){r[s[c].name]=parseFloat(a.VarCharValue);return}n==="boolean"&&(r[s[c].name]=a.VarCharValue==="true"),r[s[c].name]=a.VarCharValue}),r});return{columns:s,rows:S}}0&&(module.exports={query});
