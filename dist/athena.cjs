var k=Object.create;var y=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var g=t=>y(t,"__esModule",{value:!0});var D=(t,e)=>{g(t);for(var i in e)y(t,i,{get:e[i],enumerable:!0})},p=(t,e,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let l of A(e))!R.call(t,l)&&l!=="default"&&y(t,l,{get:()=>e[l],enumerable:!(i=x(e,l))||i.enumerable});return t},C=t=>p(g(y(t!=null?k(V(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);D(exports,{query:()=>q});var w=C(require("@aws-sdk/credential-provider-node")),s=C(require("@aws-sdk/client-athena"));let d=null;async function q(t,e={}){if(!t||typeof t!="string")throw new Error("query string is required");if(!e.bucket)throw new Error("output bucket is required");e.database=e.database||"default",e.workgroup=e.workgroup||"primary",e.catalog=e.catalog||"AwsDataCatalog",e.bucket=e.bucket||"dundermifflinco-output",e.backoff=e.backoff||1e3,e.profile=e.profile||"default",e.region=e.region||"us-east-2";const i=await(0,w.defaultProvider)({profile:e.profile})();if(!i.accessKeyId||!i.secretAccessKey)throw new Error("unable to load AWS credentials");d===null&&(d=new s.AthenaClient({region:e.region,credentials:(0,w.defaultProvider)({profile:e.profile}),maxAttempts:10}));const l=new s.StartQueryExecutionCommand({QueryString:t,WorkGroup:e.workgroup,QueryExecutionContext:{Database:e.database||"default",Catalog:e.catalog||"AwsDataCatalog"},ResultConfiguration:{OutputLocation:e.bucket.startsWith("s3://")?e.bucket:`s3://${e.bucket}`}}),m=await d.send(l);if(m.$metadata.httpStatusCode!==200)throw new Error("FailedQuery: unable to query Athena");let E=0,h=e.backoff;const b=async()=>new Promise((u,r)=>{setTimeout(async()=>{const o=new s.GetQueryExecutionCommand({QueryExecutionId:m.QueryExecutionId}),a=await d.send(o);a.$metadata.httpStatusCode!==200&&r(new Error("FailedQuery: unable to query Athena")),a.QueryExecution.Status.State==="SUCCEEDED"?u(a):a.QueryExecution.Status.State==="FAILED"?(console.log(a.QueryExecution),r(new Error("FailedQuery: unable to query Athena"))):a.QueryExecution.Status.State==="CANCELLED"?r(new Error("FailedQuery: unable to query Athena")):(a.QueryExecution.Status.State==="RUNNING"||a.QueryExecution.Status.State==="QUEUED")&&(E++,h=e.backoff+E*100,b().then(u).catch(r))},h)});await b().catch(u=>{throw new Error(u)});const Q=new s.GetQueryResultsCommand({QueryExecutionId:m.QueryExecutionId}),f=await d.send(Q);if(f.$metadata.httpStatusCode!==200)throw new Error("FailedQuery: unable to query Athena");const c=f.ResultSet.ResultSetMetadata.ColumnInfo.map(u=>({name:u.Name,type:u.Type}));f.ResultSet.Rows.shift();const S=f.ResultSet.Rows.map(u=>{const r={};return u.Data.forEach((o,a)=>{if(Object.keys(o).length===0||o.VarCharValue===null)return;const n=c[a].type;if(n==="date"||n==="timestamp"){r[c[a].name]=new Date(o.VarCharValue);return}if(n==="tinyint"||n==="smallint"||n==="integer"||n==="bigint"){r[c[a].name]=parseInt(o.VarCharValue);return}if(n==="double"||n==="float"||n==="decimal"){r[c[a].name]=parseFloat(o.VarCharValue);return}n==="boolean"&&(r[c[a].name]=o.VarCharValue==="true"),r[c[a].name]=o.VarCharValue}),r});return{columns:c,rows:S}}0&&(module.exports={query});
